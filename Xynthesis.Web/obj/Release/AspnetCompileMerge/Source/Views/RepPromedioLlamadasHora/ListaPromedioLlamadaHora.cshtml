@using PagedList.Mvc;
@using PagedList;
@model PagedList.IPagedList<Xynthesis.Modelo.xyp_RepPromedioLlamadasHora_Result>
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
<link href="~/Content/Xynthesis.css" rel="stylesheet" />
<script type="text/javascript" src="~/fonts/select/js/bootstrap-select.js"></script>
<link rel="stylesheet" href="~/fonts/select/css/bootstrap-select.min.css">
<script src="~/fonts/select/js/bootstrap-select.min.js"></script>
<script src="~/fonts/select/js/i18n/defaults-*.min.js"></script>
<link rel="stylesheet" href="~/Content/selectorfiltro.css">

@{
    ViewBag.Title = "Promedio de Llamadas Por Hora";
    var mod = (List<Xynthesis.Modelo.xyp_SelUsuarios_Result>)ViewData["usuario"];
    var mod2 = (List<Xynthesis.Modelo.xyp_SelAreas_Result>)ViewData["area"];
    var mod3 = (List<string>)ViewData["rango"];
}

<script src="~/Scripts/canvasjs.min.js"></script>
<script src="~/Scripts/jquery.canvasjs.min.js"></script>
<div class="container">


    <section style="height: 650px; width: 100%;">
        <div class="row">
            <div class="text-center">
                <h2><strong>Promedio de llamadas por hora</strong></h2>
            </div>
            <br />
            <div class="col-md-10">
                @using (Html.BeginForm("ListaPromedioLlamadaHora_", "RepPromedioLlamadasHora"))
            {

                    <div class="form-group form-inline">
                        @Html.TextBox("FechaInicial", null, new { @class = "form-control", @placeholder = "Fecha inicial", style = "width:110px" })
                        @Html.TextBox("FechaFinal", null, new { @class = "form-control", @placeholder = "Fecha final", style = "width:110px" })

                        <select class="selectpicker" multiple data-actions-box="true" data-live-search="true" data-live-search-placeholder="USUARIO" title="USUARIO" id="NomUsuario" name="usuarioId" data-size="10">
                            @foreach (var usuar in mod)
                            {
                                <option id="@usuar.Nom_Subscriber" value="@usuar.Ide_Subscriber">@usuar.Nom_Subscriber</option>
                            }
                        </select>

                        <select class="selectpicker" multiple data-actions-box="true" data-live-search="true" data-live-search-placeholder="AREA" title="AREA" id="NomArea" name="areaId" data-size="10">
                            @foreach (var are in mod2)
                            {
                                <option id="@are.Nom_Area" value="@are.Id_Area">@are.Nom_Area</option>
                            }
                        </select>

                        <select class="selectpicker" multiple data-actions-box="true" data-live-search="true" data-live-search-placeholder="RANGO" title="RANGO" id="Rango" name="rangoId" data-size="10">
                            @foreach (var ran in mod3)
                            {
                                var lista = ran;

                                <option id="@ran" value="@ran">@ran</option>
                            }
                        </select>


                        @*<input type="submit" name="btnEnviar" id="enviar" class="btn btn-success" value="GENERAR" onclick="mostrar_grafico();" />*@
                        <button type="submit" name="btnEnviar" id="enviar" class="btn btn-success" title="GENERAR" onclick="mostrar_grafico();"><i class="fas fa-file-export"></i></button>
                        <div class="form-group mx-5 text-center pull-right" id="fec">
                            <label id="lblFechas" class="control-label">@ViewBag.fechaini @ViewBag.fechafin</label>
                        </div>
                    </div>
                }
            </div>
            <div class="col-md-2 text-right">
                @using (Html.BeginForm("Reportes", "RepPromedioLlamadasHora"))
            {
                    <div class="form-group form-inline ">
                        <select name="opcion" class="form-control">
                            <option value="pdf">PDF</option>
                            <option value="excel">EXCEL</option>
                            <option value="word">WORD</option>
                        </select>

                        <button type="submit" name="btnGenerarReporte" id="GenerarReporte" class="btn btn-success" title="EXPORTAR"><i class="fas fa-print"></i></button>
                    </div>
                }
            </div>
        </div>
        <br />

        <div id="chartContainer" style="height: 370px; width: 100%;"></div>
        <br />

        <section style="height: 650px; width: 100%;">
            <table class="table table-condensed table-responsive table-hover table-striped">
                <tr tr style="background-color:#E1E1E1;">
                    <th>
                        <strong>NOMBRE DE USUARIO</strong>
                    </th>
                    <th class="text-center">
                        @*<strong>SUSCRIPTOR</strong>*@
                        <strong>AREA</strong>
                    </th>
                    <th class="text-center">
                        <strong>RANGO</strong>
                    </th>
                    <th class="text-center">
                        <strong>TIPO</strong>
                    </th>
                    <th class="text-center">
                        <strong>PROMEDIO SEGÚN TIPO</strong>
                    </th>

                </tr>

                @foreach (var item in Model)
            {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Usuario)
                        </td>
                        <td class="text-center">
                            @Html.DisplayFor(modelItem => item.Area)
                        </td>
                        <td class="text-center">
                            @Html.DisplayFor(modelItem => item.Hora)
                        </td>
                        <td class="text-center">
                            @Html.DisplayFor(modelItem => item.Tipo)
                        </td>
                        <td class="text-center">
                            @Html.DisplayFor(modelItem => item.Nro)
                        </td>

                    </tr>
                }
            </table>
            <br />
            Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
            @Html.PagedListPager(Model, page => Url.Action("ListaPromedioLlamadaHora", new { page, opcion = ViewBag.paraPaginacion, paraPaginacion = ViewBag.paraPaginacion }))
        </section>

    </section>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/Canvas")
}

<script type="text/javascript">
        // $("myfooter").Hide();
        var grafico = document.getElementById("chartContainer").value;

        if (typeof (grafico) == "undefined") {
            if (typeof (document.documentMode) == "number") {
                $("#chartContainer").css("display", "none");
            }
            else {
                $("#chartContainer").css("display", "block");
            }
        }
        else
        {
            document.getElementById("chartContainer").style.display = "none";
        }

        window.onload = function () {


            var fecha1 = document.getElementById("FechaInicial").value;
            var fecha2 = document.getElementById("FechaFinal").value;

            if (fecha1 == "") {
                $("#chartContainer").css("display", "none");
            } else {
                var grafico = document.getElementById("chartContainer").value;
                if (typeof (grafico) !== "undefined") {
                    if (typeof (document.documentMode) == "number") {
                        $("#chartContainer").css("display", "none");
                    }
                    else {
                        $("#chartContainer").css("display", "block");
                    }

                }
                else {
                    if (typeof (document.documentMode) == "number") {
                        $("#chartContainer").css("display", "none");
                    }
                    else {
                        $("#chartContainer").css("display", "display");
                    }

                }
            }



            $.ajax({
                type: "GET",
                url: "/RepPromedioLlamadasHora/ConPromediolla",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {

                    var res = parseInt(response.length);
                    if (res > 0)
                    {
                        var chart = new CanvasJS.Chart("chartContainer", {
                            animationEnabled: true,
                            title: {
                                //text: "Promedio de llamadas por hora",
                                fontSize: 32,
                                fontFamily: "Arial"
                            },
                            axisY: {
                                title: ""
                            },
                            legend: {
                                cursor: "pointer",
                                itemclick: toggleDataSeries
                            },
                            toolTip: {
                                shared: true,
                                content: toolTipFormatter
                            },
                            data: [{
                                type: "column",
                                showInLegend: true,
                                name: "Promedio de llamadas entrantes",
                                color: "gold",
                                dataPoints: []
                            },
                            {
                                type: "column",
                                showInLegend: true,
                                name: "Promedio de llamadas salientes",
                                color: "silver",
                                dataPoints: []
                            }
                            ]
                        });
                        var i = 0;
                        for (var s in response) {
                            if (response[i].Tipo == 'Promedio de Llamadas Entrantes') {
                                var valor = parseInt(response[i].Nro);
                                var length = chart.options.data[0].dataPoints.length;
                                chart.options.data[0].dataPoints.push({ y: valor, label: response[i].Hora });
                                chart.render();
                            }
                            else {
                                var valor = parseInt(response[i].Nro);
                                var length = chart.options.data[1].dataPoints.length;
                                chart.options.data[1].dataPoints.push({ y: valor, label: response[i].Hora });
                                chart.render();
                            }
                            i = i + 1;
                        }


                        chart.render();


                    }
               },
                failure: function (response) {
                    //alert("Failure: " + response.responseText);
                },
                error: function (response) {
                    //alert("ha surgido un error: " + response.responseText);
                }
            });



        };


        function toolTipFormatter(e) {
            var str = "";
            var total = 0;
            var str3;
            var str2;
            for (var i = 0; i < e.entries.length; i++) {
                var str1 = "<span style= \"color:" + e.entries[i].dataSeries.color + "\">" + e.entries[i].dataSeries.name + "</span>: <strong>" + e.entries[i].dataPoint.y + "</strong> <br/>";
                total = e.entries[i].dataPoint.y + total;
                str = str.concat(str1);
            }
            str2 = "<strong>" + e.entries[0].dataPoint.label + "</strong> <br/>";
            str3 = "<span style = \"color:Tomato\">Total: </span><strong>" + total + "</strong><br/>";
            return (str2.concat(str)).concat(str3);
        }

        function toggleDataSeries(e) {
            if (typeof (e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
                e.dataSeries.visible = false;
            }
            else {
                e.dataSeries.visible = true;}
            chart.render();
        }

        function mostrar_grafico() {
            var x = document.getElementById("grafico");
            if (x !== null) {

                if (typeof (document.documentMode) == "number") {
                    $("#chartContainer").css("display", "none");
                }
                else {
                    $("#chartContainer").css("display", "block");
                    setTimeout('mostrar_grafico()');

                }

            }
            else {
                if (typeof (document.documentMode) == "number")
                { $("#chartContainer").css("display", "none"); }
            }
        }


</script>
<script src="~/Scripts/NotacionDecimal.js"></script>